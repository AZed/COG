COG WEB PORTAL INSTALLATION INSTRUCTIONS

The following instructions describe how to quickly install the CoG environment on a Unix-type server (Cent-OS, Linux, Mac-OSX)
for the purpose of starting to use and test the web application. In a production environment, the CoG should really be front-ended
by a separately installed Apache httpd server (not covered here).

PRE-REQUISITES

The system must have the following Python packages installed:

python 2.7.2
django==1.6.5
django-grappelli==2.4.5
django-openid-auth==0.5
django-pagination==1.0.7
sqlalchemy==0.9.2
south==1.0
psycopg2==2.5.2
python-openid==2.2.5
passlib==1.6.2
pil==1.1.7

Note: CoG also depends on Django Filebrowser, but this application is shipped as part of the CoG source code because it had to be manually modified.

DOWNLOAD

Download the software from the SVN repository:

cd <install directory>
git clone git@github.com:EarthSystemCoG/COG.git
cd COG

DATABASE CONFIGURATION

o Install latest version of Postgres

o To run with a postgres database back-end (default), create a database 'cogdb' and a username, password to be access that database:

createdb -U postgres cogdb cogdbadmin

createuser -U postgres -P cogdbadmin
        - username: cogdbadmin
        - password: <your password>
(answer "n" to all other questions)

psql -U postgres --password
password: <your postgres superuser password>

postgres=#  GRANT ALL PRIVILEGES ON DATABASE cogdb TO cogdbadmin;
GRANT
postgres=# FLUSH
postgres-# \q

o Test that you can connect to the database with the new username and password:

psql -U cogdbadmin --password cogdb

COG CONFIGURATION

o Create a file called cog_settings.cfg in the directory /usr/local/cog, or in any other directory referenced by the env variable
COG_CONFIG_DIR
The file must have the following content, with values replaced by the installation specific settings:

cat cog_settings.cfg

SITE_ID=<the site specific id, an integre number. Must be coordinated with other federated CoG installations>
TIME_ZONE=<"America/Denver by default". See list of Django values for time zones>
COG_MAILING_LIST=<"cog_info@list.woc.noaa.gov" by default. Mailing list where users subscribe to>
SECRET_KEY=<the site specific key: an arbitrary string with lots of strange characters>
DATABASE_USER=<username to access cogdb postgres database>
DATABASE_PASSWORD=<password to access cogdb postgres database>
DATABASE_PORT=<port used by postgres database>


INITIALIZATION

o python manage.py syncdb (initializes tables for all applications except 'CoG')

o python manage.py migrate cog (initializes and migrates tables for 'CoG' application)

o gather the static media files from the different applications into a single directory

mkdir static
python manage.py collectstatic

RESTORE BACKUP

To restore the database status from a SQL backup:

psql -U postgres -p 5432 cogdb < cogdb_2014-03-12.sql


STARTUP

o Start the CoG application within the embedded Django development server:
python manage.py runserver

By default, the Django server is available on port 8000


USAGE AND TESTING

o Access the application home page at:
http://localhost:8000/

Please note that none of the project links contained in the right column will work because those projects do NOT exist in the local database.

o By default, the CoG database is configured with one single project called 'Test'. Access the 'Test' project home page by visiting the following URL:

http://localhost:8000/projects/test/

o Login as the site administrator by clicking the 'Login' hyperlink in the upper right of the page, and login with the following username/password:

Username: changeme
Password: changeme

IMPORTANT: immediately change the administrator username and password by clicking on the upper right link 'Django Admin',
which will show the Django Administrator web interface. Further click on 'Users', then 'changeme_user',
then start changing the administraror's profile.

o Start experimenting with creating new projects and registering new users.

FURTHER CONFIGURATION

o CKEDITOR
By default, the wiki pages (including any project home page) are editable through a simple text area widget.
CoG can be easily configured to allow editing via the third-party CKEditor, which includes a WYSIWYG interface:

Download the CKEditor version 3.6.4 and expand it to:
<installation directory>/cog/static/cog/ckeditor

Then run again:

python manage.py collectstatic


(NOTE: when running with an Apache httpd server, the CKEditor code must be located under: <installation directory>/COG/static/cog/ckeditor


o EMAIL notifiication
To enable email notification for project membership, create a file in the directory COG_CONFIG_DIR
with name .cog.cfg and the following content:

[email]
email.server=<your email server hostname>
email.username=<email server username>
email.password=<email server password>

For example, on the NOAA server:

[apache@hydra ~]$ cat/usr/local/cog/cog.cfg
[email]
email.server=dmzmail.fsl.noaa.gov
# leave port blank if default
email.port=
email.sender=earthsystemcog@noaa.gov
email.username=
email.password=
email.security=

o SSL SUPPORT

To run CoG with SSL encryption, the following actions must be taken:

- procure an SSL certificate, possibly from a recognized CA
- modify the Apache httpd configuration file to redirect all requests on port 80 to port 443. Example configuration follows:

LoadModule ssl_module modules/mod_ssl.so

<VirtualHost 172.24.254.127:80>
  ServerName dev-hydra-httpd.esrl.svc
  Redirect / https://dev-hydra-httpd.esrl.svc/
</VirtualHost>

<VirtualHost 172.24.254.127:443>
  ServerName dev-hydra-httpd.esrl.svc

  SLEngine on
  SSLCertificateFile /etc/httpd/conf/httpd.cert
  SSLCertificateKeyFile /etc/httpd/conf/httpd.key
  SetEnv SERVER_TYPE PROD

Note: the last instruction on SERVER_TYPE is used in settings.py to enable cookies only for secure requests:
it will prevent logging in from a non-secure HTTP request.

o ESGF INTEGRATION

To integrate the COG application with an existing ESGF Node, the file cog_settings.py must contain a section like the following:

[esgf]
ESGF_HOSTNAME=esg-datanode.jpl.nasa.gov
ESGF_DBURL=postgresql://<ESGF_DATABASE_USERNAME>:<ESGF_DATABASE_PASSWORD>@localhost/esgcet

where the database is either on the localhost, or it is on a remote host and it has been configured to allow read/write connections from the local COG instance.

ESGF integration involves the following capability:

1) A user with an existing ESGF account can log into COG with his/her openid.
After the first login, a new COG account is created with that openid and a username that matches the openid.

2) A user with an existing COG account can associate his/her account with one or more ESGF openids, and use those openids to log onto COG, if desired
(as an alternative to their standard username and password).

3) When a new COG account is created, a new ESGF account is created at the same time. The new ESGF openid is automatically associated with the COG account.

PROJECTS FEDERATION

The current COG site can be configured to federate with any number of remote COG sites. 
The list of possible CoG peers must be seeded from the file cog/management/commands/sites.xml that is distributed with the CoG application.

In order to load the most up-to-date list of peers into the local database, run the following django management command:

cd <COG installation directory>
python manage.py sync_sites

This command will insert any missing sites in the local database (and update their names if they have changed), but will not activate the sites by default.
Note that the same command can also be passed the '--delete' option to delete stale sites that are found in the local database, but are missing from the sites.xml file:

python manage.py sync_sites --delete

Once the sites are listed in the local database, they can be enabled by logging in as a site administrator and clicking 
on the 'Configure Peers' link in the 'Admin' menu in the lower left navigation bar.

The local CoG application can be instructed to load the most recent list of projects from the other federated instances in one of three ways:

o By visiting the page "Configure Peers" and clicking on the lower link "Synchronize with Peer CoGs Now "
(or directly invoking the URL "http://<your cog domain name>/share/sync/projects/")

o By invoking the following django management command:

cd <COG installation directory>
python manage.py sync_projects

o By setting up a cron job that executes the same command above. For example:

crontab -l
0 * * * * source ~/.bashrc; python /usr/COG/manage.py sync_projects >> /tmp/crontab.log 2>&1

will parse the user environment, and run the command at minute 0 of every hour, appending the output to file.

NOTES: 
	- projects will be updated only from peer sites that are "enabled". 
	- IMPORTANT: a site will only share projects correctly if its 'Site' domainname equals its real domain.
	  If its site domain has been recently updated, CoG must be restarted for that change to take effect, otherwise
	  the other CoGs won't see its projects
	- a site will only share those projects that are both 'active' and 'public'
	
	
NOTE: if a CoG peer site is disabled through the admin interface:
	- Its projects won't show up in the projects browser (for none of the tabs)
	- Its projects will not be selectable as peers/parent/children in the project configuration panel
	- Its data cart won't show up in the current data cart page
	- The site will not be queried for user projects updates

	
PERIODIC ADMINISTRATION TASKS

o Setup a cron job to periodically update the projects around the federation.
An example such script is provided as scripts/sync_projects.sh - which might need to be customized to your environment.

For example, to synchronize the projects every hour and append the log to a file:

0 * * * * /usr/COG/scripts/sync_projects.sh  >> /tmp/crontab.log 2>&1


o Setup a cron job to backup the postgres database content every night. 

An example script is provided as 'scripts/cog_backup.sh' - which might need to be customized to your specific installation.

For example, to backup the database every day at midnight:

0 0 * * * /usr/COG/scripts/cog_backup.sh

NOTE: to run as cron, the postgres database password must be located in file ~/.pgpass with the format:
host_name:port:database_name:database_user:database_password

Also must set the file permissionss as follows:

chmod 0600 ~/.pgpass

CUSTOMIZATION

Any HTML template used by the CoG application can be overridden by placing a custom temaplate with the same name and system path under the
root level directory <COG_CONFIG_DIR>/mytemplates/<full path to template file>,
where by default COG_CONFIG_DIR=/usr/local/cog (or COG_CONFIG_DIR can be set through an environment variable available to the CoG web container).

For example, to override the template cog/common/cog_header.html and cog/common/cog_footer.html which come with the distribution, create the two custom files:

/usr/local/cog/mytemplates/cog/common/cog_header.html
/usr/local/cog/mytemplates/cog/common/cog_footer.html

Images and other media should be located under the directory <COG_CONFIG_DIR>/mymedia/ and referenced from within the template as "/mymedia/<image name>".

For example, the file located at /usr/local/cog/mymedia/nasa.jpeg can be loaded by any template as src="/mymedia/nasa.jpeg" (please note the first leading '/').

The directories resources/mytemplates and resources/mymedia contain some examples of custom header, footer and associated media.
