COG WEB PORTAL INSTALLATION INSTRUCTIONS

The following instructions describe how to quickly install the CoG environment on a Unix-type server (Cent-OS, Linux, Mac-OSX)
for the purpose of starting to use and test the web application. In a production environment, the CoG should really be front-ended
by a separately installed Apache httpd server (not covered here).

PRE-REQUISITES

The system must have the following Python packages installed:

o Python 2.7.2+

o Django 1.5.2
  pip install Django==1.5.2
  (sqlalchemy 0.9.3+ comes with Django)

o Django Grappelli
  pip install django_grappelli==2.4.5


o Django pagination:
  easy_install --upgrade django-pagination

o South
  easy_install --upgrade south

o Python Image Library
  easy_install --upgrade pil
  
o django kronos (needed to run cron jobs that use django environment)
pip install django-kronos==0.4

To run CoG with a Postgres database back-end:

o Must have Postgres installed on server

o Python postgres libraries
  easy_install psycopg2

To enable openid logins:

o install JainRain openid python library:
sudo pip install python-openid

o install django openid_auth client library
sudo pip install django_openid_auth

o install passlib to encrypt passwords with MD5_CRYPT algorithm
sudo pip install passlib
Note: CoG also depends on Django Filebrowser, but this application is shipped as part of the CoG source code because it had to be manually modified.

DOWNLOAD

Download the software from the SVN repository:

cd <install directory>
git clone git@github.com:EarthSystemCoG/COG.git
cd COG

DATABASE CONFIGURATION

o Install latest version of Postgres

o To run with a postgres database back-end (default), create a database 'cogdb' and a username, password to be access that database:

createdb -U postgres cogdb cogdbadmin

createuser -U postgres -P cogdbadmin
        - username: cogdbadmin
        - password: <your password>
(answer "n" to all other questions)

psql -U postgres --password
password: <your postgres superuser password>

postgres=#  GRANT ALL PRIVILEGES ON DATABASE cogdb TO cogdbadmin;
GRANT
postgres=# FLUSH
postgres-# \q

o Test that you can connect to the database with the new username and password:

psql -U cogdbadmin --password cogdb

COG CONFIGURATION

o Create a file called cog_settings.cfg in the directory /usr/local/cog, or in any other directory referenced by the env variable
COG_CONFIG_DIR
The file must have the following content, with values replaced by the installation specific settings:

cat cog_settings.cfg

SITE_ID=<the site specific id, an integre number. Must be coordinated with other federated CoG installations>
TIME_ZONE=<"America/Denver by default". See list of Django values for time zones>
COG_MAILING_LIST=<"cog_info@list.woc.noaa.gov" by default. Mailing list where users subscribe to>
SECRET_KEY=<the site specific key: an arbitrary string with lots of strange characters>
DATABASE_USER=<username to access cogdb postgres database>
DATABASE_PASSWORD=<password to access cogdb postgres database>
DATABASE_PORT=<port used by postgres database>


INITIALIZATION

o python manage.py syncdb (initializes tables for all applications except 'CoG')

o python manage.py migrate cog (initializes and migrates tables for 'CoG' application)

o gather the static media files from the different applications into a single directory

mkdir static
python manage.py collectstatic

RESTORE BACKUP

To restore the database status from a SQL backup:

psql -U postgres -p 5432 cogdb < cogdb_2014-03-12.sql


STARTUP

o Start the CoG application within the embedded Django development server:
python manage.py runserver

By default, the Django server is available on port 8000


USAGE AND TESTING

o Access the application home page at:
http://localhost:8000/

Please note that none of the project links contained in the right column will work because those projects do NOT exist in the local database.

o By default, the CoG database is configured with one single project called 'Test'. Access the 'Test' project home page by visiting the following URL:

http://localhost:8000/projects/test/

o Login as the site administrator by clicking the 'Login' hyperlink in the upper right of the page, and login with the following username/password:

Username: changeme
Password: changeme

IMPORTANT: immediately change the administrator username and password by clicking on the upper right link 'Django Admin',
which will show the Django Administrator web interface. Further click on 'Users', then 'changeme_user',
then start changing the administraror's profile.

o Start experimenting with creating new projects and registering new users.

FURTHER CONFIGURATION

o CKEDITOR
By default, the wiki pages (including any project home page) are editable through a simple text area widget.
CoG can be easily configured to allow editing via the third-party CKEditor, which includes a WYSIWYG interface:

Download the CKEditor version 3.6.4 and expand it to:
<installation directory>/cog/static/cog/ckeditor

Then run again:

python manage.py collectstatic


(NOTE: when running with an Apache httpd server, the CKEditor code must be located under: <installation directory>/COG/static/cog/ckeditor


o EMAIL notifiication
To enable email notification for project membership, create a file in the directory COG_CONFIG_DIR
with name .cog.cfg and the following content:

[email]
email.server=<your email server hostname>
email.username=<email server username>
email.password=<email server password>

For example, on the NOAA server:

[apache@hydra ~]$ cat ~apache/.cog.cfg
[email]
email.server=dmzmail.fsl.noaa.gov
# leave port blank if default
email.port=
email.sender=earthsystemcog@noaa.gov
email.username=
email.password=
email.security=

o SSL SUPPORT

To run CoG with SSL encryption, the following actions must be taken:

- procure an SSL certificate, possibly from a recognized CA
- modify the Apache httpd configuration file to redirect all requests on port 80 to port 443. Example configuration follows:

LoadModule ssl_module modules/mod_ssl.so

<VirtualHost 172.24.254.127:80>
  ServerName dev-hydra-httpd.esrl.svc
  Redirect / https://dev-hydra-httpd.esrl.svc/
</VirtualHost>

<VirtualHost 172.24.254.127:443>
  ServerName dev-hydra-httpd.esrl.svc

  SLEngine on
  SSLCertificateFile /etc/httpd/conf/httpd.cert
  SSLCertificateKeyFile /etc/httpd/conf/httpd.key
  SetEnv SERVER_TYPE PROD

Note: the last instruction on SERVER_TYPE is used in settings.py to enable cookies only for secure requests:
it will prevent logging in from a non-secure HTTP request.

o ESGF INTEGRATION

To integrate the COG application with an existing ESGF Node, the file cog_settings.py must contain a section like the following:

[esgf]
ESGF_HOSTNAME=esg-datanode.jpl.nasa.gov
ESGF_DBURL=postgresql://<ESGF_DATABASE_USERNAME>:<ESGF_DATABASE_PASSWORD>@localhost/esgcet

where the database is either on the localhost, or it is on a remote host and it has been configured to allow read/write connections from the local COG instance.

ESGF integration involves the following capability:

1) A user with an existing ESGF account can log into COG with his/her openid.
After the first login, a new COG account is created with that openid and a username that matches the openid.

2) A user with an existing COG account can associate his/her account with one or more ESGF openids, and use those openids to log onto COG, if desired
(as an alternative to their standard username and password).

3) When a new COG account is created, a new ESGF account is created at the same time. The new ESGF openid is automatically associated with the COG account.

PROJECTS FEDERATION

The current COG site can be configured to federate with any number of remote COG sites. 
The remote COG sites to federate with are listed in teh '[peers]' section of the COG settings file /usr/local/cog/cog_settings.cfg
(replacing the ':' character with '|' otherwise python will not interpret the URLs correctly).

For example:

[peers]
http|//localhost|8001/

The current COG site can be updated with the latest information from the federated sites in three ways:

o By manually invoking the URL: 

http(s)://<current cog domain>/share/sync/projects/ as a COG site administrator

o By manually executing the script 'scripts/cron.py' from anywhere in the system. 
For example, if CoG is installed under '/usr/COG':

/usr/COG/scripts/cron.py

o By executing the script cron.py through the Unix cron command. 
For example, to run the script every hour, at minute 0:

0 * * * * /usr/COG/scripts/scripts/cron.py > /dev/null 2>&1

NOTE: a site will only share projects correctly if its 'Site' domainname equals its real domain