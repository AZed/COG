'''
Module containing methods for processing signals generated by model objects lifecycle.
'''

from django.dispatch import receiver
from django.db.models.signals import post_save
from django.conf import settings
from cog.plugins.esgf.security import esgfDatabaseManager
from django.contrib.auth.signals import user_logged_in
from django.contrib.sites.models import Site

from cog.models import UserProfile, Project
from cog.utils import getJson

# callback receiver function for UserProfile post_save events
@receiver(post_save, sender=UserProfile, dispatch_uid="user_profile_post_save")
def account_created_receiver(sender, **kwargs):

    # retrieve arguments
    userp = kwargs['instance']
    created = kwargs['created']

    print 'Signal received: UserProfile post_save: user=%s created=%s openids=%s' % (userp.user.get_full_name(), created, userp.openids())

    # create ESGF user: only when user profile is first created
    # from a COG registration, not as a result of an OpenID login
    if settings.ESGF_CONFIG and created and len(userp.openids())==0:
        print 'Inserting user into ESGF security database'
        esgfDatabaseManager.insertUser(userp)

def update_user_projects_at_login(sender, user, request, **kwargs):
    '''Updates the user projects every time the user logs in.'''
    
    update_user_projects(user)
    
def update_user_projects_from_session(user):
    '''Updates the user projects every time the session is too old.'''
    
    update_user_projects(user)
    
def update_user_projects(user):
    '''Function to update the user projects across the federation.'''
    
    if user.is_authenticated and user.profile.openid() is not None:
        openid = user.profile.openid()
        print 'Updating projects for user with openid=%s' % openid
        
        # loop over remote sites
        for site in Site.objects.all().exclude(id=Site.objects.get_current().id): # must exclude current site
                        
            url = "http://%s/share/user/?openid=%s" % (site.domain, openid)
            jobj = getJson(url)
            if jobj is not None and openid in jobj['users']:
                
                # remove all current groups for this site projects
                for project in Project.objects.filter(site=site):
                    for group in project.getGroups():
                        user.groups.remove( group )
                
                # loop over remote projects, roles for this user
                for projname, roles in jobj['users'][openid]['projects'].items():
                    
                    # match remote project to local project, if existing
                    for project in  Project.objects.filter(short_name__iexact=projname).all():
                        for role in roles:
                            group = project.getGroup(role)
                            if not group in user.groups.all():
                                user.groups.add(group) 
                                
                # persist changes to user groups (site by site)
                user.save()
        
    
user_logged_in.connect(update_user_projects_at_login)